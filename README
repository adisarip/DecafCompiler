
Brief Description:
==================
=> Go Through the "./docs/DecafSpec.pdf" for details regarding the Decaf Language Specification.
=> Visitor design pattern is used extensively to implement different features like
   semantic analysis, IR Generation etc.

=> ./src/Declarations/  -> Contains the header (*.hh) files of all the language constructs.
=> ./src/Definitions/   -> Contains the corresponding definations (*.cc) files
=> ./src/Visitors/      -> Contains all the Visitor Classes for different features implementation.
=> ./src/Driver/        -> Contains the scanner.ll parser.yy and other driver files
=> ./test/*.dcf         -> All the test programs written in decaf language.

=> Listed below is the complete source tree of the DecafCompiler.
   The name of each file pretty much explain what it is for.
.
├── Makefile
├── README
├── bin
│   ├── README
│   └── decaf
├── docs
│   ├── Decafspec.pdf
│   └── llvm-essentials.pdf
├── obj
├── src
│   ├── Declarations
│   │   ├── AssignmentStatement.hh
│   │   ├── Ast.hh
│   │   ├── BinaryExpression.hh
│   │   ├── BlockStatement.hh
│   │   ├── BooleanLiteral.hh
│   │   ├── BreakStatement.hh
│   │   ├── CalloutArgument.hh
│   │   ├── CalloutArgumentsList.hh
│   │   ├── CalloutMethodCall.hh
│   │   ├── CharacterLiteral.hh
│   │   ├── ContinueStatement.hh
│   │   ├── EnclosedExpression.hh
│   │   ├── Expression.hh
│   │   ├── ExpressionsList.hh
│   │   ├── FieldDeclaration.hh
│   │   ├── FieldDeclarationsList.hh
│   │   ├── ForStatement.hh
│   │   ├── HexadecimalLiteral.hh
│   │   ├── IdentifiersList.hh
│   │   ├── IfElseStatement.hh
│   │   ├── IntegerLiteral.hh
│   │   ├── Literal.hh
│   │   ├── MethodCall.hh
│   │   ├── MethodDeclaration.hh
│   │   ├── MethodDeclarationsList.hh
│   │   ├── Parameter.hh
│   │   ├── ParametersList.hh
│   │   ├── Program.hh
│   │   ├── ReturnStatement.hh
│   │   ├── Statement.hh
│   │   ├── StatementsList.hh
│   │   ├── UnaryExpression.hh
│   │   ├── UserDefinedMethodCall.hh
│   │   ├── Variable.hh
│   │   ├── VariableDeclaration.hh
│   │   ├── VariableDeclarationsList.hh
│   │   ├── VariableLocation.hh
│   │   └── VariablesList.hh
│   ├── Definitions
│   │   ├── AssignmentStatement.cc
│   │   ├── BinaryExpression.cc
│   │   ├── BlockStatement.cc
│   │   ├── BooleanLiteral.cc
│   │   ├── BreakStatement.cc
│   │   ├── CalloutArgument.cc
│   │   ├── CalloutArgumentsList.cc
│   │   ├── CalloutMethodCall.cc
│   │   ├── CharacterLiteral.cc
│   │   ├── ContinueStatement.cc
│   │   ├── EnclosedExpression.cc
│   │   ├── ExpressionsList.cc
│   │   ├── FieldDeclaration.cc
│   │   ├── FieldDeclarationsList.cc
│   │   ├── ForStatement.cc
│   │   ├── HexadecimalLiteral.cc
│   │   ├── IdentifiersList.cc
│   │   ├── IfElseStatement.cc
│   │   ├── IntegerLiteral.cc
│   │   ├── MethodDeclaration.cc
│   │   ├── MethodDeclarationsList.cc
│   │   ├── Parameter.cc
│   │   ├── ParametersList.cc
│   │   ├── Program.cc
│   │   ├── ReturnStatement.cc
│   │   ├── StatementsList.cc
│   │   ├── UnaryExpression.cc
│   │   ├── UserDefinedMethodCall.cc
│   │   ├── Variable.cc
│   │   ├── VariableDeclaration.cc
│   │   ├── VariableDeclarationsList.cc
│   │   ├── VariableLocation.cc
│   │   └── VariablesList.cc
│   ├── Driver
│   │   ├── DecafParser.cc
│   │   ├── Driver.cc
│   │   ├── Driver.hh
│   │   ├── FlexLexer.h
│   │   ├── LLVMConstructs.cc
│   │   ├── LLVMConstructs.hh
│   │   ├── Modules.hh
│   │   ├── Parser.cc
│   │   ├── Parser.hh
│   │   ├── Parser.yy
│   │   ├── Scanner.cc
│   │   ├── Scanner.hh
│   │   ├── Scanner.ll
│   │   ├── location.hh
│   │   ├── position.hh
│   │   └── stack.hh
│   └── Visitors
│       ├── AstVisitor.cc
│       ├── AstVisitor.hh
│       ├── LLVMIRGenerator.cc
│       ├── LLVMIRGenerator.hh
│       └── Visitor.hh
└── test
    ├── all_outputs.txt
    ├── binary.dcf
    ├── fact.dcf
    ├── fib.dcf
    ├── gcd.dcf
    ├── hannoi.dcf

9 directories, 149 files



Building the Compiler:
======================
=> Pre-requisites:
   - llvm, clang++, flex & bison.
   - Make sure you install them in your respective linux/unix boxes.
   - After installation make the necessary changes with the make include directories
     by pointing to the right include paths of LLVM libraries and includes.

=> Clone the repository and run
   - "make clean; make"
   - This should build the whole project and copy 'decaf' binary in ./bin directory.

=> There are 2 clean targets - 'clean' and 'clean_all'

=> "make clean"
   - Cleans the obj/ and bin/ directories.

=> "make clean_all"
   - Cleans obj/ bin/ and the auto-generated parser and scanner files as well.

=> So, if there are source code changes then just run
   - "make clean; make"

=> If there are changes made in the scanner.ll and Parser.yy files then run
   - "make clean_all; make"


Running "decaf"
===============
decaf <InputFile> [-o <OutputFile>] [-h]
   -o : Option to specify the output file for the IR generation.
        Default is <inputFile>.ir
   -h : Prints help / usage information.

Testing the Compiler:
=====================
=> There are 5 test programs in the ./test directory.
=> Each program is designed to test one major aspect of decaf compiler.
   Like - If-Else, Loops, User defined Functions, Recursion, Global Parameters etc.

Few Details ...
=> "fact.dcf"   -> Calculates the factorial of a Number.
                   Tests: Loops, If-Else.
=> "fib.dcf"    -> Prints the fibonacci sequence.
                   Tests: Loops.
=> "gcd.dcf"    -> Calculates the GCD of two numbers.
                   Tests: If-Else, User Defined Methods, Function Recursion.
=> "hannoi.dcf" -> Solves the 'Tower Of Hannoi' problem.
                   Tests: If-Else, User Defined Methods, Recursion.
=> "binary.dcf" -> Implementation of a binary search algorithm.
                   Tests: Global arrays, Loop, IF-Else.

=> For now the 'decaf' compiler dumps the LLVM IR on the standard output stream.
=> Thus, to run the any of the above program, just do the following.
    - Redirect the output of decaf into a file
    - Use the 'just-in-time' compiler from llvm toolset - "lli" to run the IR generated.

$ ./bin/decaf ./test/xyx.dcf > xyz.ir
$ lli xyz.ir
<output>


Known Issues / Future Improvements:
===================================
=> There is an issue with printing the new line character "\n".
   Somehow it isn't linked properly with the IR.
   Thus all the outputs is without any new line character.
=> There is an issue with reading user input scanf.
   Thus for testing purposes, the input values are hard-coded into *.dcf itself.
   Change the input values for different test results.
=> Planning to add "-o" option to generate the IR, instead of redirection.
=> "break;" statement is dumping core. Used a workaround to exit out the loop.

Didnt't had enough time before the submission deadline to fix these issues. However, planning to
work on them post evaluation.

