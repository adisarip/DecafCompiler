
=====================================
tests/fib.dcf => Fibonacii Series IR:
=====================================

; ModuleID = 'Decaf'
source_filename = "Decaf"

@0 = private unnamed_addr constant [27 x i8] c"Enter a positive integer: \00"
@1 = private unnamed_addr constant [3 x i8] c"%d\00"
@2 = private unnamed_addr constant [9 x i8] c"%d  %d  \00"
@3 = private unnamed_addr constant [5 x i8] c"%d  \00"
@4 = private unnamed_addr constant [3 x i8] c"\5Cn\00"

define void @main() {
Start:
  %count = alloca i32
  %nextValue = alloca i32
  %currValue = alloca i32
  %prevValue = alloca i32
  %N = alloca i32
  store i32 0, i32* %N
  store i32 0, i32* %prevValue
  store i32 0, i32* %currValue
  store i32 0, i32* %nextValue
  %0 = load i32, i32* %prevValue
  store i32 0, i32* %prevValue
  %1 = load i32, i32* %currValue
  store i32 1, i32* %currValue
  %2 = load i32, i32* %nextValue
  store i32 0, i32* %nextValue
  %3 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @0, i32 0, i32 0))
  %4 = load i32, i32* %N
  %5 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i32 %4)
  %6 = load i32, i32* %prevValue
  %7 = load i32, i32* %currValue
  %8 = call i32 bitcast (i32 (i8*)* @printf to i32 (i8*, i32, i32)*)(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i32 0, i32 0), i32 %6, i32 %7)
  store i32 1, i32* %count
  br label %Loop

Loop:                                             ; preds = %Loop, %Start
  %count1 = phi i32 [ 1, %Start ], [ %NextValue, %Loop ]
  %9 = load i32, i32* %N
  %SUB = sub i32 %9, 2
  %10 = load i32, i32* %prevValue
  %11 = load i32, i32* %currValue
  %ADD = add i32 %10, %11
  %12 = load i32, i32* %nextValue
  store i32 %ADD, i32* %nextValue
  %13 = load i32, i32* %nextValue
  %14 = call i32 bitcast (i32 (i8*)* @printf to i32 (i8*, i32)*)(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i32 %13)
  %15 = load i32, i32* %currValue
  %16 = load i32, i32* %prevValue
  store i32 %15, i32* %prevValue
  %17 = load i32, i32* %nextValue
  %18 = load i32, i32* %currValue
  store i32 %17, i32* %currValue
  %19 = load i32, i32* %count
  %ADD2 = add i32 %19, 1
  %20 = load i32, i32* %count
  store i32 %ADD2, i32* %count
  %count3 = load i32, i32* %count
  %NextValue = add i32 %count3, 1
  store i32 %NextValue, i32* %count
  %LoopCondition = icmp slt i32 %NextValue, %SUB
  br i1 %LoopCondition, label %Loop, label %AfterLoop

AfterLoop:                                        ; preds = %Loop
  %21 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*)

declare i32 @scanf(i8*, i32)




===============================
tests/fact.dcf => Factorial IR:
===============================

; ModuleID = 'Decaf'
source_filename = "Decaf"

@globalIntVar = global i32 0
@globalBoolVar = global i1 false
@0 = private unnamed_addr constant [22 x i8] c"Enter a Number >= 0: \00"
@1 = private unnamed_addr constant [3 x i8] c"%d\00"
@2 = private unnamed_addr constant [14 x i8] c"Factorial of \00"
@3 = private unnamed_addr constant [6 x i8] c" is: \00"

define void @main() {
Start:
  %i = alloca i32
  %factN = alloca i32
  %N = alloca i32
  store i32 0, i32* %N
  store i32 0, i32* %factN
  %0 = load i32, i32* %factN
  store i32 1, i32* %factN
  %1 = call i32 @print(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @0, i32 0, i32 0))
  %2 = load i32, i32* %N
  %3 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0), i32 %2)
  %4 = load i32, i32* %N
  %CEQ = icmp eq i32 %4, 0
  br i1 %CEQ, label %If, label %Else

If:                                               ; preds = %Start
  %5 = load i32, i32* %factN
  store i32 1, i32* %factN
  br label %IfNext

Else:                                             ; preds = %Start
  store i32 1, i32* %i
  br label %Loop

Loop:                                             ; preds = %Loop, %Else
  %i1 = phi i32 [ 1, %Else ], [ %NextValue, %Loop ]
  %6 = load i32, i32* %N
  %7 = load i32, i32* %factN
  %8 = load i32, i32* %i
  %MUL = mul i32 %7, %8
  %9 = load i32, i32* %factN
  store i32 %MUL, i32* %factN
  %i2 = load i32, i32* %i
  %NextValue = add i32 %i2, 1
  store i32 %NextValue, i32* %i
  %LoopCondition = icmp slt i32 %NextValue, %6
  br i1 %LoopCondition, label %Loop, label %AfterLoop

AfterLoop:                                        ; preds = %Loop
  br label %IfNext

IfNext:                                           ; preds = %AfterLoop, %If
  %10 = load i32, i32* %N
  %11 = load i32, i32* %factN
  %12 = call i32 bitcast (i32 (i8*)* @print to i32 (i8*, i32, i8*, i32)*)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i32 0, i32 0), i32 %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i32 0, i32 0), i32 %11)
  ret void
}

declare i32 @print(i8*)

declare i32 @scanf(i8*, i32)

